# -*- coding: utf-8 -*-
"""
Managed Data Structures
Copyright Â© 2017 Hewlett Packard Enterprise Development Company LP.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

As an exception, the copyright holders of this Library grant you permission
to (i) compile an Application with the Library, and (ii) distribute the
Application containing code generated by the Library and added to the
Application during this compilation process under terms of your choice,
provided you also meet the terms and conditions of the Application license.
"""

from libc.stdint cimport *
from libcpp cimport bool

from mds.core.arrays cimport *
from mds.core.strings cimport h_istring_t, h_mstring_t

cdef extern from "mds_core_api.h" namespace "mds::api" nogil:
    cdef cppclass h_mrecord_t:
        h_mrecord_t()
        h_mrecord_t(h_mrecord_t&)

        uint64_t hash1()

    cdef cppclass h_c_mrecord_t:
        h_c_mrecord_t()
        h_c_mrecord_t(h_c_mrecord_t&)

        uint64_t hash1()

    cdef cppclass h_record_type_t:
        h_record_type_t()
        h_record_type_t(h_record_type_t &)
        h_record_type_t(h_mrecord_t&)
        h_record_type_t(h_c_mrecord_t&)

        h_mrecord_t create_record()
        h_istring_t name()

        bool is_created()
        bool is_null()
        bool is_same_as(h_record_type_t&)
        bool is_super_of(h_record_type_t&)
        bool operator!=(h_record_type_t&)

        h_c_record_type_t super_type()
        h_c_record_type_t ensure_created()

        @staticmethod
        h_c_record_type_t find(const h_istring_t&)

        @staticmethod
        h_record_type_t declare(const h_istring_t&)

        @staticmethod
        h_record_type_t declare(const h_istring_t&, h_c_record_type_t&)

        uint64_t hash1()

    cdef cppclass h_c_record_type_t:
        h_c_record_type_t()
        h_c_record_type_t(h_c_record_type_t &)
        h_c_record_type_t(h_mrecord_t&)
        h_c_record_type_t(h_c_mrecord_t&)

        h_mrecord_t create_record()
        h_istring_t name()

        bool is_created()
        bool is_null()
        bool is_same_as(h_c_record_type_t&)
        bool is_super_of(h_c_record_type_t&)
        bool operator!=(h_c_record_type_t&)

        h_c_record_type_t super_type()
        h_c_record_type_t ensure_created()

        @staticmethod
        h_c_record_type_t find(const h_istring_t&)

        @staticmethod
        h_record_type_t declare(const h_istring_t&)

        @staticmethod
        h_record_type_t declare(const h_istring_t&, h_c_record_type_t&)

        uint64_t hash1()

# START INJECTION | tmpl_api_records(Primitives,Composites,Arrays)
# END INJECTION
